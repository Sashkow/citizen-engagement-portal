# Generated by Django 2.0.7 on 2018-09-03 14:26

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Achievement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('achievement', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='AchievementValue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.IntegerField()),
                ('achievement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='volunteer.Achievement')),
            ],
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('city', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('comment', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Currency',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('currency', models.CharField(max_length=80)),
                ('image', models.FileField(upload_to='media/currency')),
            ],
        ),
        migrations.CreateModel(
            name='DecreasePointsInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('achievement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='volunteer.Achievement')),
            ],
        ),
        migrations.CreateModel(
            name='DecreasePointsType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('decrease_type', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='DigestList',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=300)),
                ('events_or_task', models.BooleanField(default=True)),
                ('date_event', models.DateTimeField(blank=True, null=True, verbose_name='Час')),
                ('address', models.CharField(blank=True, max_length=300, null=True)),
                ('max_part', models.IntegerField(blank=True, null=True)),
                ('min_part', models.IntegerField(blank=True, null=True)),
                ('recommended_points', models.IntegerField()),
                ('contact', models.EmailField(blank=True, max_length=254, null=True)),
                ('publication_date', models.DateField(auto_now_add=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('city', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='volunteer.City')),
            ],
        ),
        migrations.CreateModel(
            name='EventsOrgTask',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('task_name', models.CharField(max_length=80)),
                ('task_description', models.TextField(blank=True, null=True)),
                ('done', models.BooleanField(default=False)),
                ('recommended_points', models.IntegerField()),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='volunteer.Event')),
            ],
        ),
        migrations.CreateModel(
            name='EventsParticipant',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='volunteer.Event')),
            ],
        ),
        migrations.CreateModel(
            name='EventsPhoto',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('photo', models.ImageField(upload_to='media/event_images')),
                ('is_it_cover', models.BooleanField(default=False)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='volunteer.Event')),
            ],
        ),
        migrations.CreateModel(
            name='EventsSubscriber',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='volunteer.Event')),
            ],
        ),
        migrations.CreateModel(
            name='EventsType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(max_length=80)),
            ],
        ),
        migrations.CreateModel(
            name='IncreasePointsInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='volunteer.Event')),
            ],
        ),
        migrations.CreateModel(
            name='IncreasePointsType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('increase_type', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='League',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('league', models.CharField(max_length=80)),
                ('quantity_achievement', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='PointsList',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('increase', models.BooleanField(default=True)),
                ('points_quantity', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Report',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Status',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(max_length=80)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=80)),
                ('last_name', models.CharField(max_length=80)),
                ('date_of_registration', models.DateField(auto_now_add=True)),
                ('photo', models.ImageField(blank=True, null=True, upload_to='media/avatars')),
                ('blocked', models.BooleanField(default=False)),
                ('city', models.ForeignKey(default='1', on_delete=django.db.models.deletion.CASCADE, to='volunteer.City')),
                ('django_user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('league', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='volunteer.League')),
            ],
        ),
        migrations.CreateModel(
            name='UserPoint',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.IntegerField()),
                ('currency', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='volunteer.Currency')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='volunteer.User')),
            ],
        ),
        migrations.AddField(
            model_name='report',
            name='user_from',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='from+', to='volunteer.User'),
        ),
        migrations.AddField(
            model_name='report',
            name='user_to',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='to+', to='volunteer.User'),
        ),
        migrations.AddField(
            model_name='pointslist',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='volunteer.User'),
        ),
        migrations.AddField(
            model_name='increasepointsinfo',
            name='increase',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='volunteer.PointsList'),
        ),
        migrations.AddField(
            model_name='increasepointsinfo',
            name='increase_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='volunteer.IncreasePointsType'),
        ),
        migrations.AddField(
            model_name='eventssubscriber',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='volunteer.User'),
        ),
        migrations.AddField(
            model_name='eventsparticipant',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='volunteer.User'),
        ),
        migrations.AddField(
            model_name='event',
            name='events_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='volunteer.EventsType'),
        ),
        migrations.AddField(
            model_name='event',
            name='organizer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='volunteer.User'),
        ),
        migrations.AddField(
            model_name='event',
            name='status',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='volunteer.Status', verbose_name='Статус'),
        ),
        migrations.AddField(
            model_name='digestlist',
            name='type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='volunteer.EventsType'),
        ),
        migrations.AddField(
            model_name='digestlist',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='volunteer.User'),
        ),
        migrations.AddField(
            model_name='decreasepointsinfo',
            name='decrease',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='volunteer.PointsList'),
        ),
        migrations.AddField(
            model_name='decreasepointsinfo',
            name='decrease_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='volunteer.IncreasePointsType'),
        ),
        migrations.AddField(
            model_name='currency',
            name='type_event',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='volunteer.EventsType'),
        ),
        migrations.AddField(
            model_name='comment',
            name='event',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='volunteer.Event'),
        ),
        migrations.AddField(
            model_name='comment',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='volunteer.User'),
        ),
        migrations.AddField(
            model_name='achievementvalue',
            name='currency',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='volunteer.Currency'),
        ),
        migrations.AddField(
            model_name='achievement',
            name='league',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='volunteer.League'),
        ),
        migrations.AlterUniqueTogether(
            name='userpoint',
            unique_together={('user', 'currency')},
        ),
        migrations.AlterUniqueTogether(
            name='report',
            unique_together={('user_from', 'user_to')},
        ),
        migrations.AlterUniqueTogether(
            name='eventssubscriber',
            unique_together={('user', 'event')},
        ),
        migrations.AlterUniqueTogether(
            name='eventsparticipant',
            unique_together={('user', 'event')},
        ),
        migrations.AlterUniqueTogether(
            name='comment',
            unique_together={('user', 'event', 'date')},
        ),
        migrations.AlterUniqueTogether(
            name='achievementvalue',
            unique_together={('achievement', 'currency')},
        ),
    ]
